<?
class Nxj_UI {

	public function __construct() {

	}


	/**
	* @param array $params {
	*
	*   Required arguments:
	*
	*   @type String 'iconURL' => '/Path/to/img/src'
	*	   The iconURL is the url that will go into the src attribute of the <img /> icon on the left hand side of the section head.
	*
	*   @type String 'title' => 'Text to be displayed'
	*	   Plain text to be displayed in the title section of the section head.
	*
	*   @type String 'subTitle' => 'Text to be displayed'
	*	   Plain text containing the subtitle of the section head. The subtitle will appear on the left hand side of the section head.
	*
	*
	*   Optional arguments:
	*
	*   @type String 'actionLeft' => 'plain text or <a> Anchor Tag </a>'
	*	   Left action item should be set as plain text or <a> Anchor Tag </a>. If is set the contents of the left action item will appear on the right hand side of the section head.
	*
	*   @type String 'actionRight' => 'plain text or <a> Anchor Tag </a>'
	*	   Right action item should be set as plain text or <a> Anchor Tag </a>. If is set the contents of the right action item will appear on the right hand side of the section head.
	*
	*   @type String 'badge' => ''
	*	   TODO. 
	*				 
	* }	
	* @return String
	*/
	public static function sectionhead($params) {
		//Required Params
		$iconURL = $params['iconURL'];
		$title = $params['title'];
		$subTitle = $params['subTitle'];

		//Optional Params
		$actionLeft = isset($params['actionLeft']) ? $params['actionLeft'] : null;
		$actionRight = isset($params['actionRight']) ? $params['actionRight'] : null;
		$badge = isset($params['badge']) ? $params['badge'] : null;


	}

	/**
	* @param array $params {
	*
	*   Required arguments:
	*
	*   @type String 'id' => 'lightbox'
	*	   The id attribute applied to the outer-most <div> of the widget.
	*
	*   @type String 'title' => 'Text to be displayed'
	*	   The string to display in the title section of the lightbox.
	*
	*   @type String 'content' => 'Text to be displayed'
	*	   A string containing the main body of the lightbox. This can be generated by another $this->part() call, if desired.
	*
	*
	*   Optional arguments:
	*
	*   @type Boolean 'showCloseButton' => true
	*	   <Defualt> true
	*	   If true, puts an 'X' in the upper-right corner of the lightbox that closes the whole lightbox. If false, the 'X' is omitted, and you will need to hide() the lightbox yourself.	   
	*
	*   @type Boolean 'clickClose' => false
	*	   <Defualt> false
	*	   If true, clicking outside the lightbox (in the grey area) will close the lightbox.
	*
	*   @type Boolean 'visible' => false
	*	   <Defualt> false
	*	   If true, the lightbox will be visible on pageload. If false, it will be hidden, and should be activated by Javascript.
	*
	*   @type Integer 'width' => auto
	*	   <Defualt> auto
	*	   The width of the lightbox. Defaults to the width of the content, however there is a min-width of 400px.
	*
	*   @type Integer 'height' => auto
	*	   <Defualt> auto
	*	   The height of the lightbox. Defaults to the height of the content plus the height of the title.
	*
	*   @type Integer 'top' => 200
	*	   <Defualt> 200
	*	   The top margin of the lightbox in pixels. If the lightbox is tall, it may be helpful to reduce this margin so the whole lightbox fits on screen.
	*	   
	* }	
	* @return String
	*/
	public static function lightbox($params) {
		$clickClose = (isset($params['clickClose'])&&$params['clickClose'] ? true : false);
		$display = (isset($params['visible'])&&$params['visible']?'':'display:none;');
		$callback = (isset($params['callback'])&&$params['callback'] ? $params['callback'].'();' : '');
		$style = ''
			.(isset($params['top'])?'margin-top:'.$params['top'].'px;':'')
			.(isset($params['width'])?'width:'.$params['width'].'px;':'')
			.(isset($params['height'])?'height:'.$params['height'].'px;':'');

		$output = "
<div class=\"nxj_lightboxHolder\"
		style=\"".$display."\"
		id=\"".$params['id']."\"
		".($clickClose ? " onclick=\"if(!Event.findElement(event,'.nxj_lightbox')){ $('".$params['id']."').hide(); $callback }\"" : "")."
	>
	<div class=\"nxj_lightbox\" style=\"".$style/"\">";

		if(!isset($params['showCloseButton']) || $params['showCloseButton']==true){
			$output .= "
		<div class=\"nxj_lightboxClose\" onclick=\"$('".$params['id']."').hide(); ".$callback."\"></div>";
		}

		$output .= "
		<div class=\"nxj_lightboxTitle\">".$params['title']."</div>
		<div class=\"nxj_lightboxContent\">".$params['content']."</div>
	</div>
</div>";

		return $output;
	}

	public static function tabs($params) {
		$params['fixed'] = isset($params['fixed']) ? $params['fixed'] : false;
		$callback = isset($params['callback'])&&$params['callback'] ? 'onclick="'.$params['callback'].'();"' : '';

		$output = "
<div id=\"".$params['id']."\" class=\"nxj_tabs\" $callback>
	<div class=\"tabHolder\">";
		foreach($params['tabs'] as $tab){
			$output .= "
		<div class=\"tab".(!empty($tab->selected) ? ' selected' : '').(($params['fixed']) ? ' large' : '')." data-target=\"".$params['id'].'_'.$tab->label.">
			".$tab->label."
		</div>";
		}
		$output .= "
		<div class=\"clear\"></div>";

		foreach($params['tabs'] as $tab){
			$output .= "
		<div class=\"".$params['id'].'_'.$tab->label." nxj_tabBlock".(empty($tab->selected) ? ' hide' : '')."\">
			".$tab->content."
		</div>";
		}

		$output .= "
	</div>
</div>
<script>
activateTabSet('".$params['id']."');
</script>";
		return $output;
	}

	public static function button($params) {
		$background = isset($params['imageURL']) ? "background-image:url('".$params['imageURL']."');" : "";
		$color = isset($params['color']) ? strtolower($params['color']) : 'blue';
		$width = "width:".(isset($params['imageURL']) ? $params['width'] : $params['width']-28)."px;";

		$output = "
<a id=\"".$params['id']."\"
		class=\"nxj_button".(isset($params['disabled'])&&$params['disabled'] ? ' disabled' : '').(isset($params['float']) ? ' float'.ucfirst($params['float']) : '').(isset($params['imageURL']) ? '' : ' nxj_cssButton')." $color\"
		style=\"$background $width\"
		href=\"".(isset($params['linkURL']) ? $params['linkURL'] : 'javascript:void(0);')."\"
		onclick=\"";

		if(isset($params['callback'])){
			$output .= "if(!$(this).hasClassName('disabled')) return ".$params['callback']."() !== false;\"";
		}else{
			$output .= "return !$(this).hasClassName('disabled');\""
		}

		$output .= "
	>
		".(!isset($params['imageURL'])&&isset($params['text']) ? $params['text'] : '')."
</a>";

		return $output;
	}

	public static function selectbox($params) {
		$output = "
<div id=\"".$params['id']."\"
		class=\"nxj_select".(isset($params['float']) ? ' float'.ucfirst($params['float']) : '').(isset($params['class']) ? ' '.$params['class'] : '')."\" 
		style=\"width:".($params['width']-2)."px;".(isset($params['zindex']) ? ' z-index:'.$params['zindex'].';' : '')."\">
	<div class=\"nxj_selectDisplay default\">".(isset($params['defaultText']) ? $params['defaultText'] : '')."</div>
	<div class=\"nxj_selectArrow\"></div>
	<div class=\"nxj_selectInner\">";

		foreach($params['options'] as $oneOption){
			$output .= "
		<div class=\"nxj_selectOption\"
					data-value=\"".$oneOption->value."\"
					onclick=\"".$params['callback']."($(this).getAttribute('data-value'), $(this).innerHTML);\"
					".(isset($oneOption->default)&&$oneOption->default ? ' data-default="true"' : '')."
			>
			".$oneOption->display."
		</div>";
		}

		$output .= "
	</div>
	<input class=\"nxj_selectValue\"
		id=\"".$params['id']."_input\"
		type=\"hidden\"
		".(isset($params['name']) ? ' name="'.$params['name'].'"' : $params['id'])."
		value=".(isset($params['defaultValue']) ? $params['defaultValue'] : '')."\"/>
</div>";

		return $output;
	}

	public static function datepicker($params) {
		$type = isset($this->type) ? $this->type : 'single';
		$date_start = DateFactory::anythingToTime($type=='range' ? $this->date_start : (isset($this->date) ? $this->date : null));
		$date_end = isset($this->date_end) ? DateFactory::anythingToTime($this->date_end) : null;
		$firstShown = strtotime(date('Y-m-d', DateFactory::anythingToTime(isset($this->firstShown)?$this->firstShown:$date_start)));
		$name = isset($this->name) ? $this->name : null;
		$id = isset($this->id) ? $this->id : null;
		$monthCount = isset($this->monthCount) ? $this->monthCount : 1;
		$width = isset($this->width) ? $this->width : ($type=='range' ? 230 : 110);
		$inputWidth = $type=='range' ? ($width-30)/2 : $width-10;
		$allowPast = isset($this->allowPast) ? $this->allowPast : false;
		$pinSide = isset($this->openDir)&&stripos($this->openDir,'left')!==false ? 'right:0;' : 'left:0;';
		$pinEdge = isset($this->openDir)&&stripos($this->openDir,'up')!==false ? 'bottom:100%;' : 'top:100%;';
		$zindex = isset($this->zindex)?$this->zindex:null;

		$output = "
<div class=\"nxj_datePicker".(isset($this->float) ? ' float'.ucfirst($this->float) : '')."
		".($id?'id="'.$id.'"':'')."
		style=\"".($width?'width:'.$width.'px;':'').($zindex!==null?'z-index:'.$zindex.';':'')."
		data-type=\"$type\"
		data-monthcount=\"$monthCount\"
		data-firstshown=\"$firstShown\"
		data-allowpast=\"".($allowPast?1:0)."\"
		data-period=\"start\"
		data-start=\"$date_start\"
		".($type=='range' ? 'data-end="'.$date_end.'"' : '')."
		".(isset($this->callback) ? 'data-callback="'.$this->callback.'"' : '')."
	>
	<input class=\"nxj_input\"
			type=\"text\"
			value=\"".date('n/j/Y', $date_start)."\"
			style=\"width:".$inputWidth."px;\"
			".($id?'id="'.$id.($type=='range'?'_start':'').'_display"':'')."
			data-period=\"start\"
		/>
	<input class=\"nxj_datePickerReal\"
			type=\"hidden\"
			value=\"$date_start\"
			".($name?'name="'.$name.($type=='range'?'_start':'').'"':'')."
			".($id?'id="'.$id.($type=='range'?'_start':'').'_real"':'')."
		/>";

		if($type=='range'){
			$output .= "
	<div class=\"calendar_icon\" style=\"right:".($inputWidth+24)."px;\" data-period=\"start\"></div>
	<input class=\"nxj_input\"
			type=\"text\"
			value=\"".date('n/j/Y', $date_start)."\"
			style=\"width:".($inputWidth)."px;margin-left:10px;\"
			".($id?'id="'.$id.($type=='range'?'_end':'').'_display"':'')."
			data-period=\"end\"
		/>
	<input class=\"nxj_datePickerReal\"
			type=\"hidden\"
			value=\"$date_start\"
			".($name?'name="'.$name.($type=='range'?'_end':'').'_start"':'')."
			".($id?'id="'.$id.($type=='range'?'_end':'').'_real"':'')."
		/>";
		}

		$output .= "
	<div class=\"calendar_icon\" data-period=\"".($type=='range' ? 'end' : 'start')."\"></div>
	<div class=\"nxj_calendar monthCount_$monthCount\" style=\"$pinSide$pinEdge\">";

		if($this->title){
			$output .= "
		<div class=\"nxj_calendarHeader\">
			".$this->title."
		</div>";
		}

		for($i=0; $i<$monthCount; ++$i){
			$output .= "
		<div class=\"nxj_month ".($i%3==2||$i==$monthCount-1?'last':'')."\">
			<div class=\"nxj_monthHeader\">";

			if($i==0){
				$output .= "
				<div class=\"monthScroll left\" title=\"Previous month\">&lt;</div>";
			}

			$output .= "
				<div class=\"monthName\"></div>";

			if($i==$monthCount-1){
				$output .= "
				<div class=\"monthScroll right\" title=\"Next month\">&gt;</div>";
			}

			$output .= "
			</div>
			<div class=\"clear\"></div>

			<div class=\"nxj_dayNames\">
				<div class=\"dayName\">Su</div>
				<div class=\"dayName\">Mo</div>
				<div class=\"dayName\">Tu</div>
				<div class=\"dayName\">We</div>
				<div class=\"dayName\">Th</div>
				<div class=\"dayName\">Fr</div>
				<div class=\"dayName\">Sa</div>
			</div>
			<div class=\"clear\"></div>

			<div class=\"nxj_monthBody\"></div>
		</div>";

			if($i%3==2&&$i<$monthCount-1){
				$output .= "
		<div class=\"clear\" style=\"height:10px;\"></div>";
			}
		}

		$output .= "
	</div>
</div>";

		return $output;
	}

	public static function slider($params) {
		$id = isset($this->id) ? $this->id : null;
		$name = isset($this->name) ? $this->name : null;
		$type = isset($this->type) ? $this->type : 'single';
		$mode = isset($this->mode) ? $this->mode : 'discrete';
		$decimals = isset($this->decimals) ? (int)$this->decimals : 0;
		$min = isset($this->min) ? (float)$this->min : 0;
		$max = isset($this->max) ? (float)$this->max : 100;
		$increment = isset($this->increment) ? $this->increment : ($mode=='discrete'?($max-$min)/5:pow(0.1,$decimals));
		$temp1 = isset($this->value1) ? (float)$this->value1 : ($type=='range' ? (4*$min+$max)/5.0 : $min);
		$temp2 = isset($this->value2) ? (float)$this->value2 : (isset($this->value) ? (float)$this->value : ($type=='range' ? (4*$max+$min)/5.0 : (3*$max+2*$min)/5.0));
		$value1 = min($temp1, $temp2);
		$value2 = max($temp1, $temp2);
		$width = isset($this->width) ? (int)$this->width-20 : 180;
		$scale = ($max-$min) ? ($width/($max-$min)) : $width;
		$segWidth = floor(($value2-$value1) * $scale);
		if(isset($this->increment)){
		    $min = ceil($min/$increment)*$increment;
		    $max = floor($max/$increment)*$increment;
		    $value1 = round($value1/$increment)*$increment;
		    $value2 = round($value2/$increment)*$increment;
		}
		if(!$decimals){
		    $min = (int)$min;
		    $max = (int)$max;
		    $value1 = (int)$value1;
		    $value2 = (int)$value2;
		    $increment = (int)$increment;
		}
		$value1 = min($max, max($min, $value1));
		$value2 = min($max, max($min, $value2));
		$disabled = ($max==$min);
		$marker = isset($this->marker) ? $this->marker : false;
		$float = isset($this->float) ? 'float'.ucfirst($this->float) : '';
		$callback = isset($this->callback) ? $this->callback : null;

		$output = "
<div class=\"nxj_slider $type ".($marker ? "marker_$marker" : '')." $float ".($disabled?'disabled':'')."\"
		".($id?'id="'.$id.'"':'')."
		style=\"width:".($width+20)."px;\"
		data-type=\"$type\"
		data-mode=\"$mode\"
		data-decimals=\"$decimals\"
		data-min=\"$min\"
		data-max=\"$max\"
		data-scale=\"$scale\"
		data-marker=\"$marker\"
		data-increment=\"$increment\"
		".($disabled?'data-disabled="1"':'')."
		".($callback ? 'data-callback="'.$callback.'"' : '')."
	>";

		if($type=='range'){
			$output .= "
	<input classa=\"nxj_sliderInput_left\" ".($id?'id="'.$id.'_value_left"':'')." type=\"hidden\" ".($name?'name="'.$name.'_left"':'')." value=\"$value1\" />
	<input class=\"nxj_sliderInput_right\" ".($id?'id="'.$id.'_value_right"':'')." type=\"hidden\" ".($name?'name="'.$name.'_right"':'')." value=\"$value2\" />";
		}else{
			$output .= "
	<input class=\"nxj_sliderInput_right\" ".($id?'id="'.$id.'_value"':'')." type=\"hidden\" ".($name?'name="'.$name.'"':'')." value=\"$value2\" />";
		}

		$output .= "
	<div class=\"nxj_sliderBar\" style=\"width:".$width."px;\"></div>
	<div class=\"nxj_sliderSegment\" style=\"width:".($disabled?$width:$segWidth)."px; left:".(($value1-$min)*$scale)."px;\"></div>";

		if($type=='range'){
			$output .= "
	<div class=\"nxj_sliderHandle handleLeft\" style=\"left:".(($value1-$min)*$scale)."px;\"></div>";
		}

		$output .= "
	<div class=\"nxj_sliderHandle handleRight\" style=\"left:".($disabled?$width:($value2-$min)*$scale)."px;\"></div>
	<div class=\"clear\"></div>";

		if($marker){
			$index = 0;
			for($i=$min; $i<=$max; $i=min($i+$increment, $max)){
				if($mode=='discrete' || $i==$min || $i==$max){
					$output .= "
	<div class=\"nxj_sliderMarker\" data-index=\".($index++).\" style=\"left:".floor(($i-$min)*$scale)."px;\">
		".($marker=='number'?number_format($i,$decimals):'')."
	</div>";
				}
				if($i==$max) break;
			}
		}

		$output .= "
</div>";

		return $output;
	}

	public static function scrollbar($params) {
/* TODO
<style type="text/css">
#<?= $this->id?> {
	position: relative;
	height: <?= $this->height?>;
	overflow: hidden;
	border: 1px solid #ccc;
	border-radius: 4px;
}
#<?= $this->id?> .<?= $this->innerClass?> {
	width: 96%;
}
#scrollBar {
	height: 100%;
	width: 0;
	border: 5px solid #EEE;
	border-width: 0 5px;
	border-radius: 5px;
	position: absolute;
	right: 2px;
	top: 0;
	zoom: 1;
	z-index: 5;
}
#scrollBar .scrollHandle {
	position: absolute;
	top: 0;
	right: -5px;
	height: 30%;
	width: 0;
	border: 5px solid #555;
	border-width: 0 5px;
	border-radius: 5px;
	zoom: 1;
}
</style>

<div id="scrollBar" class="scrollBar" style="<?= Util::select($this, 'visible', true) ? '' : 'display:none'?>" data-callback="<?= $this->callback?>">
	<div class="scrollHandle" style="top:0"></div>
</div>

<script style="text/javascript">
var nxj = window.nxj || {};
var inner = <?= json_encode($this->innerClass)?>;
nxj.scrollBar =  {
	bar: '',
	outer: '',

	init: function(outer) {
		var height = Math.round(Math.min(outer.getHeight()/outer.down('.'+inner).getHeight(), 1)*100);
		this.bar = outer.down('.scrollBar');
		this.outer = outer;
		this.callback(height);

		this.bar.down('.scrollHandle').setStyle({'top' : '0px'});

		this.scroll();
	},

	update: function(outer) {
		var height = Math.round(Math.min(outer.getHeight()/outer.down('.'+inner).getHeight(), 1)*100);
		this.bar = outer.down('.scrollBar');
		this.outer = outer;
		this.callback(height);
		this.scroll();
	},

	callback: function(height) {
		this.bar.down('.scrollHandle').setStyle({'height': height+'%'});
		var self = this,
			handle = this.bar.down('.scrollHandle'),
			maxOffset = this.outer.getHeight() - handle.getHeight();

		var evt = (/Firefox/i.test(navigator.userAgent))? "DOMMouseScroll" : "mousewheel";
		this.bar.next('.'+inner).stopObserving();
		this.bar.next('.'+inner).observe(evt, scrollListener); 

		this.drag(handle, maxOffset); 

		function scrollListener(event) {
			event.preventDefault(event);

			var sign = Object.isUndefined(event.wheelDelta) ? event.detail/Math.abs(event.detail) : -(event.wheelDelta/Math.abs(event.wheelDelta)),
				top = parseFloat(handle.getStyle('top'))+20*sign,
				top = top < maxOffset ? (top > 0 ? top : 0) : maxOffset;
			
			handle.setStyle({'top': top+'px'}); 
			self.scroll();

			var ufunc = $('scrollBar').getAttribute('data-callback');
			if(typeof window[ufunc] == 'function') {
				window[ufunc].call();
			}
		} 
	},

	scroll: function() {
		var top = Math.ceil(parseInt(this.bar.down().getStyle('top'))/this.bar.getHeight()*(this.outer.down('.'+inner).getHeight()+80));
		this.outer.down('.'+inner).setStyle({'top': '-'+top+'px', 'position': 'relative'});
	},

	drag: function(handle, maxOffset) {
		var self = this;
		var dragger = new Draggable(handle, { 
			constraint: 'vertical',
			scroll: this.bar,
			snap: function(x, y, obj) {
				return [ x, maxOffset >= y ? (y > 0 ? y :0) : maxOffset];
			},
			onDrag: function() {
				self.scroll();
				self.drag(handle, maxOffset);

				var ufunc = $('scrollBar').getAttribute('data-callback');
				if(typeof window[ufunc] == 'function') {
					window[ufunc].call();
				}
			}
		});
	}
};
</script>
*/
	}

	public static function pagination($params) {
/*
<?
$showAll = 0;
$callreset = 0;
if($this->showAll){
	$showAll = $this->showAll;
}
if($this->callreset){
	$callreset = $this->callreset;
}
?>

<div class="nxj_uiPagination">
	<ul class="nxj_uiPage">
		<li id="p_prev" <?if($this->current == 1){?>class="disabled"<?}else{?>onclick="<?=$this->callback?>(-1);<?if($callreset==true){?>resetPaginate(-1,<?=$this->total?>,<?=$showAll?>,'<?=$this->callback?>',<?=$callreset?>);"<?} }?>>
			&lt;&lt; Prev
		</li>
		<li id="p_1" <?if($this->current == 1){?>class="active"<?}?> onclick="<?=$this->callback?>(1);<?if($callreset==true){?>resetPaginate(1,<?=$this->total?>,<?=$showAll?>,'<?=$this->callback?>',<?=$callreset?>);<?}?>"> 1 </li>
		<li id="p_prel" class="hidden">...</li>
		<?for($i=2;$i < $this->total;$i++){?>
			<li id="p_<?=$i?>" <?if($i == $this->current){?>class="active"<?}?> onclick="<?=$this->callback?>(<?=$i?>);<?if($callreset==true){?>resetPaginate(<?=$i?>,<?=$this->total?>,<?=$showAll?>,'<?=$this->callback?>',<?=$callreset?>);<?}?>">
				<?=$i?>
			</li>
		<?}?>
		<li id="p_nxel" class="hidden">...</li>
		<li id="p_<?=$this->total?>" <?if($this->current == $this->total){?>class="active"<?}?> onclick="<?=$this->callback?>(<?=$this->total?>);<?if($callreset==true){?>resetPaginate(<?=$this->total?>,<?=$this->total?>,<?=$showAll?>,'<?=$this->callback?>',<?=$callreset?>);<?}?>"> <?=$this->total?> </li>
		<li id="p_next" <?if($this->current == $this->total){?>class="disabled"<?}else{?>onclick="<?=$this->callback?>(-2);<?if($callreset){?>resetPaginate(-2,<?=$this->total?>,<?=$showAll?>,'<?=$this->callback?>',<?=$callreset?>);"<?} }?>>
			Next &gt;&gt;
		</li>
		<?if($showAll){?>
			<li id="p_all" onclick="<?=$this->callback?>(0);<?if($callreset==true){?>resetPaginate(0,<?=$this->total?>,<?=$showAll?>,'<?=$this->callback?>',<?=$callreset?>);<?}?>">View All</li>
		<?}?>
	</ul>
</div>
*/
	}

	public static function tooltip($params) {
		$direction = (isset($this->direction) ? ucfirst(strtolower($this->direction)) : 'Up');
		$width = (isset($this->width) ? $this->width : 0);
		$widthStyle = ($width ? 'width:'.$width.'px;' : '');
		$height = (isset($this->height) ? $this->height : 0);
		$heightStyle = ($height ? 'height:'.$height.'px;' : '');
		$zindexStyle = (isset($this->zindex) ? 'z-index:'.$this->zindex.';' : '');
		$displayStyle = (isset($this->visible) && $this->visible ? 'display:block;' : '');
		$oneLine = (isset($this->height) ? '' : ' oneLine');
		$xoffsetStyle = '';
		$yoffsetStyle = '';
		if($direction=='Up' || $direction=='Down'){
			$xoffset = (isset($this->xoffset) ? $this->xoffset : 0) - floor(($width?$width:140)/2 + 20);
			$xoffsetStyle = ($xoffset ? 'left:'.$xoffset.'px;' : '');
		}else{
			$yoffset = (isset($this->yoffset) ? $this->yoffset : 0) - floor(($height?$height:13)/2  + 10);
			$yoffsetStyle = ($yoffset ? 'top:'.$yoffset.'px;' : '');
		}

		$output .= "
<div ".(isset($this->id) ? 'id="'.$this->id.'"' : '')."
		class=\"nxj_tip$direction\"
		style=\"$zindexStyle$displayStyle\"
	>
	<div class=\"nxj_tipArrow\"></div>
	<div class=\"nxj_tipContent$oneLine\" style=\"$widthStyle$heightStyle$xoffsetStyle$yoffsetStyle\">
		".$this->content."
	</div>
</div>";

		return $output;
	}

	public static function carousel($params) {
		$panels = array_values($this->panels);
		$float = isset($this->float) ? 'float'.ucfirst(strtolower($this->float)) : '';

		$output = "
<div id=\"".$this->id."\" class=\"nxj_carousel $float\"
		data-width=\"".$this->width."\"
		data-height=\"".$this->height."\"
		data-hoverpause=\"".(isset($this->hoverPause)&&$this->hoverPause ? 'yes' : 'no')."\"
		data-delayduration=\"".(isset($this->delayDuration) ? $this->delayDuration : '8.0')."\"
		data-animationtype=\"".(isset($this->animationType) ? $this->animationType : 'slide')."\"
		data-animationdir=\"".(isset($this->animationDir) ? $this->animationDir : 'E')."\"
		data-animationreversedir=\"".(isset($this->animationReverseDir) ? $this->animationReverseDir : (isset($this->animationDir) ? $this->animationDir : 'W'))."\"
		data-animationduration=\"".(isset($this->animationDuration) ? $this->animationDuration : '0.9')."\"
		data-animationindex="0"
		data-transition=\"".(isset($this->transition) ? $this->transition : 'sinoidal')."\"
		data-currentindex="0"
		data-numpanels=\"".count($panels)."\"
		data-autoscroll=\"".(isset($this->autoScroll)&&!$this->autoScroll ? 'no' : 'yes')."\"
	>
	<div class=\"nxj_carouselInner\" style=\"width:".$this->width."px;height:".$this->height."px;\">";

		foreach($panels as $i=>$onePanel){
			$output .= "
		<div id=\"".($this->id.'_panel_'.$i)."\" class=\"nxj_carouselPanel\" style=\"top:0;left:0;".($i==0 ? '' : 'display:none;')."\">
			$onePanel
		</div>";
		}

		$output .= "
	</div>";

		if(isset($this->showControls) && $this->showControls){
			$controlOffset = floor($this->width/2.0 - 19 - 8*count($panels));
			$controlWidth = max(0, $this->width-$controlOffset);
			$output .= "
	<div class=\"nxj_carouselControls\" style=\"width:".$controlWidth."px;padding-left:".$controlOffset."px;\">
		<div class=\"nxj_carouselControlsInner\">
			<div class=\"nxj_carouselControlsLeft\"></div>";

			for($i=0; $i<count($panels); ++$i){
				$output .= "
			<div class=\"nxj_carouselControlsDot".($i==0?' on':'')."\" data-index=\"$i\"></div>";
			}

			$output .= "
			<div class=\"nxj_carouselControlsRight\"></div>
		</div>
	</div>";
		}

		$output .= "
</div>

<script>
".$this->id."_timer = null;
".$this->id."_lock = false;
";

if(!(isset($this->noScript) && $this->noScript)){
	$output .= "
if(!nxj_carouselForward) var nxj_carouselForward = function(car){
	car = $(car);
	var currentIndex = parseInt(car.getAttribute('data-currentindex'));
	var numPanels = parseInt(car.getAttribute('data-numpanels'));
	nxj_carouselMove(car, (currentIndex+1)%numPanels);
}

if(!nxj_carouselBackward) var nxj_carouselBackward = function(car){
	car = $(car);
	var currentIndex = parseInt(car.getAttribute('data-currentindex'));
	var numPanels = parseInt(car.getAttribute('data-numpanels'));
	nxj_carouselMove(car, (currentIndex+numPanels-1)%numPanels);
}

if(!nxj_carouselMove) var nxj_carouselMove = function(car, index){
	// Return if carousel is locked, else lock it
	car = $(car);
	if(document[car.id + '_lock']) return;
	document[car.id + '_lock'] = true;
	clearTimeout(document[car.id + '_timer']);

	// Get animation parameters
	var width = parseInt(car.getAttribute('data-width'));
	var height = parseInt(car.getAttribute('data-height'));
	var animationType = car.getAttribute('data-animationtype');
	var animationDirs = car.getAttribute('data-animationdir').split(',');
	var animationReverseDir = car.getAttribute('data-animationreversedir');
	var animationDuration = parseFloat(car.getAttribute('data-animationduration'));
	var animationIndex = parseInt(car.getAttribute('data-animationindex'));
	var transition = car.getAttribute('data-transition');
	var currentIndex = parseInt(car.getAttribute('data-currentindex'));
	var numPanels = parseInt(car.getAttribute('data-numpanels'));

	// Find out whether we're going forward or backward
	if(currentIndex == index) return document[car.id + '_lock']=false;
	var reverse = (currentIndex>index ? !((index==0)&&(currentIndex+1==numPanels)) : ((index+1==numPanels)&&(currentIndex==0)));
	if(reverse) animationIndex = (animationIndex+animationDirs.length-1)%animationDirs.length
	var animationDir = animationDirs[animationIndex];

	// Get the entering and leaving panels
	var oldPanel = $(car.id+'_panel_'+currentIndex);
	var newPanel = $(car.id+'_panel_'+index);

	// Apply the appropriate animation
	oldPanel.setStyle({'zIndex':0});
	newPanel.setStyle({'zIndex':1});
	switch(animationType){
	case 'appear':
		newPanel.show();
		oldPanel.hide();
		document[car.id + '_lock']=false;
		break;

	case 'fade':
		oldPanel.fade({
			duration: animationDuration
			,transition: Effect.Transitions[transition]
		});
		newPanel.appear({
			duration: animationDuration
			,transition: Effect.Transitions[transition]
			,afterFinish: function(){
				document[car.id + '_lock']=false;
			}
		});
		break;

	case 'cover':
		var newLeft = animationDir.indexOf('W')>-1 ? width*-1 : (animationDir.indexOf('E')>-1 ? width : 0);
		var newTop = animationDir.indexOf('N')>-1 ? height*-1 : (animationDir.indexOf('S')>-1 ? height : 0);
		if(reverse){
			oldPanel.setStyle({'zindex':1});
			newPanel.setStyle({'zindex':0, 'left':'0px', 'top':'0px', 'display':'block'});
			new Effect.Morph(oldPanel, {
				style: 'top:'+newTop+'px;left:'+newLeft+'px;'
				,duration: animationDuration
				,transition: Effect.Transitions[transition]
				,afterFinish: function(){
					oldPanel.hide();
					document[car.id + '_lock']=false;
				}
			});
		}else{
			newPanel.setStyle({'left':newLeft+'px', 'top':newTop+'px', 'display':'block'});
			new Effect.Morph(newPanel, {
				style: 'top:0px;left:0px;'
				,duration: animationDuration
				,transition: Effect.Transitions[transition]
				,afterFinish: function(){
					oldPanel.hide();
					document[car.id + '_lock']=false;
				}
			});
		}
		break;

	case 'slide':
	default:
		var newLeft = animationDir.indexOf('W')>-1 ? width*-1 : (animationDir.indexOf('E')>-1 ? width : 0);
		var newTop = animationDir.indexOf('N')>-1 ? height*-1 : (animationDir.indexOf('S')>-1 ? height : 0);
		if(reverse){
			newPanel.setStyle({'left':(newLeft*-1)+'px', 'top':(newTop*-1)+'px', 'display':'block'});
			new Effect.Morph(oldPanel, {
				style: 'top:'+newTop+'px;left:'+newLeft+'px;'
				,duration: animationDuration
				,transition: Effect.Transitions[transition]
				,afterFinish: function(){
					oldPanel.hide();
					document[car.id + '_lock']=false;
				}
			});
			new Effect.Morph(newPanel, {
				style: 'top:0px;left:0px;'
				,duration: animationDuration
				,transition: Effect.Transitions[transition]
			});
		}else{
			newPanel.setStyle({'left':newLeft+'px', 'top':newTop+'px', 'display':'block'});
			new Effect.Morph(oldPanel, {
				style: 'top:'+(newTop*-1)+'px;left:'+(newLeft*-1)+'px;'
				,duration: animationDuration
				,transition: Effect.Transitions[transition]
				,afterFinish: function(){
					oldPanel.hide();
					document[car.id + '_lock']=false;
				}
			});
			new Effect.Morph(newPanel, {
				style: 'top:0px;left:0px;'
				,duration: animationDuration
				,transition: Effect.Transitions[transition]
			});
		}
		break;
	}
	if(!reverse) animationIndex = (animationIndex+1)%animationDirs.length;
	car.setAttribute('data-animationindex', animationIndex);
	car.setAttribute('data-currentindex', index);

	// If controls are shown, highlight the correct dot
	var controls = car.select('.nxj_carouselControls');
	if(controls.length){
		controls = controls[0];
		controls.select('.nxj_carouselControlsDot').each(function(oneDot){
			if(oneDot.getAttribute('data-index') == currentIndex) oneDot.removeClassName('on');
			if(oneDot.getAttribute('data-index') == index) oneDot.addClassName('on');
		});
	}

	// Set a timeout for the next cycle
	var autoScroll = car.getAttribute('data-autoscroll');
	if(autoScroll == 'yes'){
		var delayDuration = parseFloat(car.getAttribute('data-delayduration'));
		document[car.id + '_timer'] = setTimeout(function(){
			nxj_carouselForward(car);
		}, delayDuration*1000);
	}
}

if(!nxj_carouselInit) var nxj_carouselInit = function(car){
	// Get carousel properties
	car = $(car);
	var inner = (car.select('.nxj_carouselInner'))[0];
	var autoScroll = car.getAttribute('data-autoscroll');
	var hoverPause = car.getAttribute('data-hoverpause');

	// Attach hover-pause observer
	if(autoScroll == 'yes' && hoverPause == 'yes'){
		inner.observe('mouseenter', function(){
			if(document[car.id + '_timer']) clearTimeout(document[car.id + '_timer']);
		});
		inner.observe('mouseleave', function(){
			document[car.id + '_timer'] = setTimeout(function(){
				nxj_carouselForward(car);
			}, delayDuration*1000);
		});
	}

	// Initialize controls
	var controls = car.select('.nxj_carouselControls');
	if(controls.length){
		controls = controls[0];
		controls.select('.nxj_carouselControlsDot').each(function(oneDot){
			oneDot.observe('click', function(){
				nxj_carouselMove(car, parseInt(oneDot.getAttribute('data-index')));
			});
		});
		controls.select('.nxj_carouselControlsLeft').each(function(oneArrow){
			oneArrow.observe('click', function(){
				nxj_carouselBackward(car);
			});
		});
		controls.select('.nxj_carouselControlsRight').each(function(oneArrow){
			oneArrow.observe('click', function(){
				nxj_carouselForward(car);
			});
		});
	}

	// Start the carousel if autoscroll is enabled
	if(autoScroll == 'yes'){
		var delayDuration = parseFloat(car.getAttribute('data-delayduration'));
		document[car.id + '_timer'] = setTimeout(function(){
			nxj_carouselForward(car);
		}, delayDuration*1000);
	}
}
";
}

$output .= "
Event.observe(window, 'load', function(){
	var id = '".$this->id."';
	nxj_carouselInit($(id));
});
</script>";

		return $output;
	}

}
?>
